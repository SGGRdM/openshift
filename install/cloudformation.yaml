#########################################################################
#      Copyright (C) 2020        Sebastian Francisco Colomar Bauza      #
#      SPDX-License-Identifier:  GPL-2.0-only                           #
#########################################################################

---

AWSTemplateFormatVersion: "2010-09-09"

Description: This template fixes the problem of the invalid certificate for Openshift in AWS

Parameters:

  ClusterName:
    Default: ''
    Description: >
      The name of the Openshift cluster
    Type: String

  HealthCheckPath:
    Default: /healthz
    Description: >
      The ping path that is the destination on the targets for health checks.
    Type: String

  HealthCheckPort:
    Default: 1936
    Description: >
      The port the load balancer uses when performing health checks on targets.
    Type: String

  HostedZoneName:
    Default: ''
    Description: >
      The name of the hosted zone that you want to create records in.
    Type: String

  Identifier:
    Default: ''
    Description: >
      The Identifier of the certificate you want to use.
    Type: String

  InstanceWorker1:
    Default: ''
    Description: >
      The Id of Instance Worker 1
    Type: String

  InstanceWorker2:
    Default: ''
    Description: >
      The Id of Instance Worker 2
    Type: String

  InstanceWorker3:
    Default: ''
    Description: >
      The Id of Instance Worker 3
    Type: String

  IpProtocolListener:
    Default: tcp
    Description: >
      The IP protocol for Listener.
    Type: String

  Port1:
    Default: 80
    Description: >
      The listening port 1.
    Type: Number

  Port2:
    Default: 443
    Description: >
      The listening port 2.
    Type: Number

  ProtocolALB1:
    Default: HTTP
    Description: >
      The protocol for Application Load Balancer 1.
    Type: String

  ProtocolALB2:
    Default: HTTPS
    Description: >
      The protocol for Application Load Balancer 2.
    Type: String

  ProtocolNLB:
    Default: TCP
    Description: >
      The protocol for Network Load Balancer.
    Type: String

  RecordSetNameALB:
    Default: '*.apps'
    Description: >
      The Record Set Name for the Application Load Balancer.
    Type: String

  RecordSetNameNLB:
    Default: oauth-openshift.apps
    Description: >
      The Record Set Name for the Network Load Balancer.
    Type: String

  SecurityGroupCidrIp:
    Default: 0.0.0.0/0
    Description: >
      Allowed CIDR block for external web access.
      Set it to 0.0.0.0/0 to make it accessible from anywhere.
    Type: String

  SubnetPublic1:
    Default: ''
    Description: >
      The Id of the Public Subnet 1
    Type: String

  SubnetPublic2:
    Default: ''
    Description: >
      The Id of the Public Subnet 2
    Type: String

  SubnetPublic3:
    Default: ''
    Description: >
      The Id of the Public Subnet 3
    Type: String

  VpcId:
    Default: ''
    Description: >
      The Id of the VPC
    Type: String

  VpcCidrBlock:
    Default: ''
    Description: >
      The CIDR block for the VPC
    Type: String

  VpcDefaultSecurityGroup:
    Default: ''
    Description: >
      The default Security Group for the VPC
    Type: String


Resources:

  ListenerALB1:
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupALB1
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerALB
      Port: !Ref Port1
      Protocol: !Ref ProtocolALB1
    Type: AWS::ElasticLoadBalancingV2::Listener

  ListenerALB2:
    Properties:
      Certificates:
        - CertificateArn: !Sub 'arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${Identifier}'
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupALB2
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerALB
      Port: !Ref Port2
      Protocol: !Ref ProtocolALB2
    Type: AWS::ElasticLoadBalancingV2::Listener

  ListenerNLB:
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupNLB
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerNLB
      Port: !Ref Port2
      Protocol: !Ref ProtocolNLB
    Type: AWS::ElasticLoadBalancingV2::Listener

  LoadBalancerALB:
    Properties:
      SecurityGroups:
        - !Ref VpcDefaultSecurityGroup
        - !Ref SecurityGroup
      Subnets:
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2
        - !Ref SubnetPublic3
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer

  LoadBalancerNLB:
    Properties:
      Subnets:
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2
        - !Ref SubnetPublic3
      Type: network
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer

  RecordSetALB:
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancerALB.DNSName
        HostedZoneId: !GetAtt LoadBalancerALB.CanonicalHostedZoneID
      HostedZoneName: !Sub '${HostedZoneName}.'
      Name: !Sub '${RecordSetNameALB}.${ClusterName}.${HostedZoneName}'
      Type: A
    Type: AWS::Route53::RecordSet

  RecordSetALBprivate:
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancerALB.DNSName
        HostedZoneId: !GetAtt LoadBalancerALB.CanonicalHostedZoneID
      HostedZoneName: !Sub '${ClusterName}.${HostedZoneName}.'
      Name: !Sub '${RecordSetNameALB}.${ClusterName}.${HostedZoneName}'
      Type: A
    Type: AWS::Route53::RecordSet

  RecordSetNLB:
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancerNLB.DNSName
        HostedZoneId: !GetAtt LoadBalancerNLB.CanonicalHostedZoneID
      HostedZoneName: !Sub '${HostedZoneName}.'
      Name: !Sub '${RecordSetNameNLB}.${ClusterName}.${HostedZoneName}'
      Type: A
    Type: AWS::Route53::RecordSet

  RecordSetNLBprivate:
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancerNLB.DNSName
        HostedZoneId: !GetAtt LoadBalancerNLB.CanonicalHostedZoneID
      HostedZoneName: !Sub '${ClusterName}.${HostedZoneName}.'
      Name: !Sub '${RecordSetNameNLB}.${ClusterName}.${HostedZoneName}'
      Type: A
    Type: AWS::Route53::RecordSet

  SecurityGroup:
    Properties:
      GroupDescription: Allow access to the Application Load Balancer
      SecurityGroupIngress:
      -
        CidrIp: !Ref SecurityGroupCidrIp
        FromPort: !Ref Port1
        IpProtocol: !Ref IpProtocolListener
        ToPort: !Ref Port1
      -
        CidrIp: !Ref SecurityGroupCidrIp
        FromPort: !Ref Port2
        IpProtocol: !Ref IpProtocolListener
        ToPort: !Ref Port2
      VpcId: !Ref VpcId
    Type: AWS::EC2::SecurityGroup

  TargetGroupALB1:
    Properties:
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckPort: !Ref HealthCheckPort
      Port: !Ref Port1
      Protocol: !Ref ProtocolALB1
      Targets:
        -   Id: !Ref InstanceWorker1
        -   Id: !Ref InstanceWorker2
        -   Id: !Ref InstanceWorker3
      TargetType: instance
      VpcId: !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

  TargetGroupALB2:
    Properties:
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckPort: !Ref HealthCheckPort
      Port: !Ref Port2
      Protocol: !Ref ProtocolALB2
      Targets:
        -   Id: !Ref InstanceWorker1
        -   Id: !Ref InstanceWorker2
        -   Id: !Ref InstanceWorker3
      TargetType: instance
      VpcId: !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

  TargetGroupNLB:
    Properties:
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckPort: !Ref HealthCheckPort
      Port: !Ref Port2
      Protocol: !Ref ProtocolNLB
      Targets:
        -   Id: !Ref InstanceWorker1
        -   Id: !Ref InstanceWorker2
        -   Id: !Ref InstanceWorker3
      TargetType: instance
      VpcId: !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

